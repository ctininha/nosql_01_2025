# Prevenção de Duplicidade de Cupons: O Bloom Filter será usado para verificar se um cupom já foi aplicado a uma venda, evitando vendas fraudulentos.

import os
import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import redis
from redis.commands.core import Script

# Suprimir aviso de depreciação do Tk
os.environ['TK_SILENCE_DEPRECATION'] = '1'

# Conectar ao Redis
r = redis.Redis(host='localhost', port=6379, db=0)

# Carregar o script Lua para adicionar o cupom usando Bloom Filter
script_pf_add_coupon = r.register_script("""
local chave_bloom = KEYS[1]
local cupom = ARGV[1]
local resultado = redis.call('BF.ADD', chave_bloom, cupom)
return resultado
""")

# Função para salvar dados no Redis com Bloom Filter para cupons
def salvar_no_banco(dados_venda, cupom):
    try:
        # Usar Bloom Filter para verificar se o cupom já foi usado
        chave_bloom_cupons = "cupons_usados"
        cupom_ja_usado = script_pf_add_coupon(keys=[chave_bloom_cupons], args=[cupom])

        if cupom_ja_usado:  # Se o cupom não foi usado
            # Gerar uma chave única para o registro
            chave_venda = f"venda:{datetime.now().strftime('%Y%m%d%H%M%S%f')}"
            # Salvar os dados como um hash no Redis
            r.hset(chave_venda, mapping=dados_venda)
            return True  # Retorna verdadeiro para indicar sucesso
        else:
            return False  # Retorna falso para indicar falha (cupom já usado)

    except redis.exceptions.RedisError as e:
        # Captura erros específicos do Redis e os trata
        print(f"Erro do Redis ao salvar dados: {e}")  # Log para o desenvolvedor
        messagebox.showerror("Erro", "Ocorreu um erro ao salvar os dados. Por favor, tente novamente.")
        return False  # Retorna falso para indicar falha
    except Exception as e:
        # Captura outros erros gerais
        print(f"Erro inesperado ao salvar dados: {e}")  # Log para o desenvolvedor
        messagebox.showerror("Erro", "Ocorreu um erro inesperado. Por favor, tente novamente.")
        return False  # Retorna falso em caso de erro

# Função para exibir os dados inseridos e salvar no Redis
def exibir_dados():
    try:
        data_hora_venda = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        descricao = descricao_entry.get()
        quantidade = quantidade_entry.get()
        valor_venda = valor_venda_entry.get()
        metodo_pagamento = metodo_pagamento_combobox.get()
        unidade = unidade_entry.get()
        valor_custo = valor_custo_entry.get()
        grupo_produto = grupo_produto_entry.get()
        fornecedor = fornecedor_entry.get()
        nome_funcionario = nome_funcionario_entry.get()
        loja = loja_entry.get()
        status_venda = status_venda_combobox.get()
        cupom = cupom_entry.get()  # Novo campo para o cupom

        # Validar se os campos obrigatórios estão preenchidos
        if not descricao or not quantidade or not valor_venda:
            messagebox.showerror("Erro", "Os campos Descrição, Quantidade e Valor de Venda são obrigatórios.")
            return

        # Criando o dicionário de dados para ser salvo no Redis
        dados_venda = {
            "data_hora_venda": data_hora_venda,
            "descricao": descricao,
            "quantidade": quantidade,
            "valor_venda": valor_venda,
            "metodo_pagamento": metodo_pagamento,
            "unidade": unidade,
            "valor_custo": valor_custo,
            "grupo_produto": grupo_produto,
            "fornecedor": fornecedor,
            "nome_funcionario": nome_funcionario,
            "loja": loja,
            "status_venda": status_venda,
            "cupom": cupom  # Incluir o cupom nos dados da venda
        }

        # Salvar dados no Redis com Bloom Filter para cupons
        salvou_com_sucesso = salvar_no_banco(dados_venda, cupom)  # Captura o retorno da função

        if salvou_com_sucesso:
            # Exibir os dados na tela
            dados_venda_texto = f""" "VENDA REALIZADA"\n
Data e Hora da Venda: {data_hora_venda}\n
Descrição: {descricao}
Quantidade: {quantidade}
Valor de Venda: {valor_venda}
Método de Pagamento: {metodo_pagamento}
Unidade: {unidade}
Valor de Custo: {valor_custo}
Grupo do Produto: {grupo_produto}
Fornecedor: {fornecedor}
Nome do Funcionário: {nome_funcionario}
Loja: {loja}
Status da Venda: {status_venda}
Cupom: {cupom}
"""
            messagebox.showinfo("Dados da Venda", dados_venda_texto)
            limpar_campos()
        else:
            messagebox.showerror("Erro", "Este cupom já foi utilizado. A venda não foi registada.")

    except Exception as e:
        print(f"Erro inesperado ao exibir os dados: {e}")  # Log para o desenvolvedor
        messagebox.showerror("Erro", "Ocorreu um erro inesperado. Por favor, tente novamente.")

# Função para limpar os campos após o registro
def limpar_campos():
    descricao_entry.delete(0, tk.END)
    quantidade_entry.delete(0, tk.END)
    valor_venda_entry.delete(0, tk.END)
    metodo_pagamento_combobox.set("")
    unidade_entry.delete(0, tk.END)
    valor_custo_entry.delete(0, tk.END)
    grupo_produto_entry.delete(0, tk.END)
    fornecedor_entry.delete(0, tk.END)
    nome_funcionario_entry.delete(0, tk.END)
    loja_entry.delete(0, tk.END)
    status_venda_combobox.set("")
    cupom_entry.delete(0, tk.END)  # Limpar o campo do cupom

# Criando a interface gráfica
try:
    root = tk.Tk()

    # Adiciona uma linha em branco antes do título
    tk.Label(root, text="").pack()  # Linha em branco

    root.title("Auto Posto Trevão - Registro das Vendas")
    root.geometry("400x700")  # Aumentar a altura da janela

    # Labels e Campos de Entrada
    tk.Label(root, text="Descrição do Item:").pack()
    descricao_entry = tk.Entry(root)
    descricao_entry.pack()

    tk.Label(root, text="Quantidade:").pack()
    quantidade_entry = tk.Entry(root)
    quantidade_entry.pack()

    tk.Label(root, text="Valor de Venda:").pack()
    valor_venda_entry = tk.Entry(root)
    valor_venda_entry.pack()

    tk.Label(root, text="Método de Pagamento:").pack()
    metodo_pagamento_combobox = ttk.Combobox(root, values=["Dinheiro", "Crédito", "Débito", "Pix"])
    metodo_pagamento_combobox.pack()

    tk.Label(root, text="Unidade do Item:").pack()
    unidade_entry = tk.Entry(root)
    unidade_entry.pack()

    tk.Label(root, text="Valor de Custo:").pack()
    valor_custo_entry = tk.Entry(root)
    valor_custo_entry.pack()

    tk.Label(root, text="Grupo do Produto:").pack()
    grupo_produto_entry = tk.Entry(root)
    grupo_produto_entry.pack()

    tk.Label(root, text="Fornecedor:").pack()
    fornecedor_entry = tk.Entry(root)
    fornecedor_entry.pack()

    tk.Label(root, text="Nome do Funcionário:").pack()
    nome_funcionario_entry = tk.Entry(root)
    nome_funcionario_entry.pack()

    tk.Label(root, text="Loja da Venda:").pack()
    loja_entry = tk.Entry(root)
    loja_entry.pack()

    tk.Label(root, text="Status da Venda:").pack()
    status_venda_combobox = ttk.Combobox(root, values=["Finalizada", "Cancelada", "Pendente"])
    status_venda_combobox.pack()

    tk.Label(root, text="Cupom:").pack()  # Novo campo para Cupom
    cupom_entry = tk.Entry(root)
    cupom_entry.pack()

    # Adiciona duas linhas em branco
    tk.Label(root, text="").pack()  # Primeira linha em branco

    # Botão de Salvar dados
    tk.Button(root, text="Salvar Venda", command=exibir_dados).pack()

    # Inicia o loop principal da interface gráfica
    root.mainloop()

except Exception as e:
    print(f"Ocorreu um erro ao iniciar a interface gráfica: {e}")
